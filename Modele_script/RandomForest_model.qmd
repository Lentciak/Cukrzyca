---
title: "RandomForest"
author: "Szymon Olędzki, Igor Nowiński"
format: html
theme: 
  dark: darkly
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(caret)
library(doSNOW)
```

```{r}
#Załadowanie zbioru danych
dane <- read.csv("diabetes_binary.csv", header = TRUE, sep = ",", dec = ".")
```

```{r}
#Podział zbioru na zmienne jakościowe i ilościowe, 
#dodatkowo utworzenie podzbioru wyłącznie ze zmiennymi jakościowymi

numeric_vars <- c('BMI', 'MentHlth', 'PhysHlth')

num_vars_cols <- which(colnames(dane) %in% numeric_vars)

dane <- dane %>%
  mutate(across(!all_of(num_vars_cols), as.factor))

#Należy dodatkowo wyróżnić zmienne, w których ważny jest porządek danych wartości nominalnych, jak np. wiek. Z tego powodu musimy je dodatkowo uporządkować.

with_order_vars <- c('Age', 'Education', 'Income', 'GenHlth')

dane <- dane %>%
  mutate(across(all_of(with_order_vars), as.ordered))

dane$GenHlth <- fct_rev(dane$GenHlth)

#Pozbywamy się również duplikatów danych ze zbioru
dane <- distinct(dane)
```

```{r}
#Usuwamy ze zbioru zmienne o niskiej wariancji, bo nie wniosą do modelu istotnych informacji
dane <- dane[,-nearZeroVar(dane)]
```

```{r}
#Łączymy pierwsze 3 poziomy zmiennej 'Education', ze względu na bardzo niewielką ilość informacji jaką przekazują osobno

dane$Education <- fct_collapse(dane$Education, '3-' = c('1', '2', '3'))
```

```{r}
#Dodatkowo zmieniamy poziomy naszej zmiennej objaśniającej na 'yes'(1) i 'no'(0) (konieczne dla poprawnego działania RandomForest i XGBoost)
levels(dane$Diabetes_binary) <- c('no', 'yes')
```

```{r}
#PODZIAŁ DANYCH
set.seed(2024)
trainIndex <- createDataPartition(dane$Diabetes_binary,
                                  p = .75,
                                  list = FALSE)

dane.train <- dane[trainIndex,]
dane.test <- dane[-trainIndex,]
```

```{r}
#PRZYGOTOWANIE MODELU
start <- Sys.time()

cl <- makeCluster(6, type = 'SOCK') #ok. 2 godziny

registerDoSNOW(cl)

twoClassControl <- trainControl(
  method = 'repeatedcv',
  number = 5,
  repeats = 5,
  savePredictions = 'final',
  classProbs = T,
  summaryFunction = twoClassSummary,
  sampling = 'down',
  allowParallel = T)

rf_bin <- train(Diabetes_binary ~ ., 
                data = dane.train, 
                method = 'rf', 
                metric = 'ROC', 
                trControl = twoClassControl, 
                tuneLength = 10)

stopCluster(cl)
koniec <- Sys.time()
```

```{r}
probs <- seq(.01, 0.99, by = 0.01)

ths <- thresholder(rf_bin,
                   threshold = probs,
                   final = TRUE,
                   statistics = "all")
```

```{r}
rf_bin <- readRDS('Modele/rf_model.rds')
```

```{r}
# Predykcja na zbiorze testowym
predykcja <- predict(rf_bin, dane.test, type = 'prob')

#0.43 to najlepszy wynik dający balans między Specifity a Sensitivity
predykcja <- ifelse(predykcja[,1] >= 0.43, 'no', 'yes')

confusionMatrix(data = as.factor(predykcja),
                reference = dane.test$Diabetes_binary, 
                positive = 'yes')
```

```{r}
# Zapis modelu do pliku
saveRDS(rf_bin, "Modele/rf_model.rds")
```
